# Core Predictor Design

## Integration

The basic idea is to do something along the lines of

```python
while True:
    x_dot = f(x, t)
    x += x_dot * dt
```

which is in fact the basic principle of `scipy.integrate.odeint` (though note (below) that we hold position as latitude, longitude but f returns a Cartesian velocity).

However, we want to be able to swap "bits" of f out; that is, take our pick from some "__models__":

  - wind
  - altitude models
      - constant up, `x^-n` down
      - floating balloon
  - something more exotic like parachute glide.

For the majority of cases, taking `f` (the function the integrator will use) as linear combinations of models, all with signature (`(x, t) -> x_dot`), will suffice.

At the start, some configuration is loaded, and a function is (dynamically) created; simply put:

```python
def make_f(models): return lambda x, t: sum(model(x, t) for model in models)
```

## Signature of `f`

```python
def f(x, t):
    return x_dot
```

where

  - `x = [latitude, longitude, altitude]` (list; maybe rank-1 numpy array; maybe object with helper methods to convert to/from map projections)
  - `t` is an object with attributes
      - `now` - absolute time, a Python `datetime.datetime`
        this might be quite expensive to create and rarely used, so could be created only when needed?
      - `flight_time` - time since the prediction started, in seconds (float)
      - `dt_past` - time since the last step
  - `x_dot = [u_dot, v_dot, altitude_dot]` (the returned value; list etc.)
    `u_dot` and `v_dot` are velocities northwards and eastwards wrt. the current position; the integrator is therefore responsible for converting this into changes to geographic coordinates.

### Termination of flights

To terminate the flight, the model should raise the `tawhiri.models.StopIntegrating` exception (which the integrator will catch and deal with).

## Simple models

The most basic model would be a function

```python
def my_model(x, t): return [1, 2, 3]
```

## Complex models

Thanks to callable objects, we can keep the simple concept of a model being a function, but add configuration and state.

```python
class Model(object):
    def __init__(self, settings):
        self.settings = settings
        self.state = True

    def __call__(self, x, t):
        if self.state:
            return [1, 2, 3]
            self.state = False
        else:
            return [4, 5, self.settings["something"]]
```

This does mean that the model functions are no longer pure as they can have the side effects of changing their internal state:

  - This would mean the integrator must (at the very least) promise to only increase `t` on each call to the model.
  - The only real solution would be to make model functions (`(x, t, state) -> (x_dot, state)`). Thoughts?

